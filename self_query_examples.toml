# check allowed comparator for specific self-query enabled vectorstores
# Redis support fuzzy match CONTAIN and LIKE in addition to all regular exact match comparators
# https://github.com/langchain-ai/langchain/blob/d7c26c89b2d4f5ff676ba7c3ad4f9075d50a8ab7/libs/langchain/langchain/retrievers/self_query/redis.py#L40

# sorting orders
# source > tags > name > author

[[example]] # 1st example, showing preference to use LIKE filter

user_query = "谁是王尔德？仅从“小说”中找答案。"
structured_request.query = "谁是王尔德？"
structured_request.filter = "or(like(\"source\", \"小说\"), like(\"tags\", \"小说\"), like(\"name\", \"小说\"))"


[[example]] # 2nd example, can query one attributes with multiple queries

user_query = "请从三岛由纪夫的小说找到下文相关片段：“我们之所以突然变得残暴”的后面是什么？"
structured_request.query = "我们之所以突然变得残暴"
structured_request.filter = "or(like(\"source\", \"小说\"),  like(\"tags\", \"小说\"), like(\"name\", \"三岛由纪夫\"), like(\"author\", \"三岛由纪夫\"))"


[[example]] # 3rd example, strengthen the fuzzy match logic

user_query = "《天使与昆虫》是哪位作家的作品？"
structured_request.query = "天使与昆虫"
structured_request.filter = "or(like(\"source\", \"天使与昆虫\"), like(\"tags\", \"天使与昆虫\"), like(\"name\", \"天使与昆虫\"))"


[[example]] # 4th example, strengthen the fuzzy match logic

user_query = "道连是哪本小说中出现的人物？"
structured_request.query = "道连"
structured_request.filter = "or(like(\"source\", \"小说\"), like(\"tags\", \"小说\"), like(\"name\", \"小说\"))"


[[example]] # 5th example, more common use cases

user_query = "本多是王尔德笔下的人物吗？"
structured_request.query = "本多"
structured_request.filter = "or(like(\"source\", \"王尔德\"), like(\"tags\", \"王尔德\")， like(\"name\", \"王尔德\"), like(\"author\", \"王尔德\"))"


[[example]] # 6th example, use date filter
user_query = "我在2019年到2022年间写过多少游记？"
structured_request.query = "游记"
structured_request.filter = "and(eq(\"source\", \"写作\"), gt(\"date_start\", 20190101), lt(\"date_start\", 20221231))"


[[example]] # 7th example，empty filters for irrelevant questions

user_query = "美国有多少个州？"
structured_request.query = "" # empty query
structured_request.filter = "NO_FILTER"
